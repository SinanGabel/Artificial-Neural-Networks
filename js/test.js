
QUnit.module( "summul.ai" );

// ...
QUnit.test( "sigmoid(v) etc.", function(assert) {
    
    let in1 = [[[ 0.67826139,  0.29380381], [ 0.90714982,  0.52835647], [ 0.4215251 ,  0.45017551]], [[ 0.92814219,  0.96677647], [ 0.85304703,  0.52351845], [ 0.19981397,  0.27417313]], [[ 0.60659855,  0.00533165], [ 0.10820313,  0.49978937], [ 0.34144279,  0.94630077]]];
        
    let out1 = [ 0.67826139, 0.29380381, 0.90714982, 0.52835647, 0.4215251, 0.45017551, 0.92814219, 0.96677647, 0.85304703, 0.52351845, 0.19981397, 0.27417313, 0.60659855, 0.00533165, 0.10820313, 0.49978937, 0.34144279, 0.94630077 ]; 
    
    let out2 = [ [ 0.9808976649146187, 0.0008944628906901777, 0.017965767417378736, 0.00012105238865619453, 0.00012105238865619453 ], [ 0.87867985588699, 0.11891638717077183, 0.0008012523140793875, 0.0008012523140793875, 0.0008012523140793875 ] ];
    
    assert.deepEqual( sigmoid([1,2,3]), [ 0.7310585786300049,  0.8807970779778823,  0.9525741268224334], "OK" );

    assert.deepEqual( sigmoid_m1([1,2,3]), [ 0.19661193324148185, 0.10499358540350662, 0.045176659730912 ], "OK" );

    assert.deepEqual( image2vector(in1), out1, "OK" );

    assert.deepEqual( normalizeRows([[0,3,4],[1,6,4]]), [ [ 0, 0.6, 0.8 ], [ 0.13736056394868904, 0.8241633836921342, 0.5494422557947561 ] ], "OK" );

    assert.deepEqual( softmax([[9, 2, 5, 0, 0], [7, 5, 0, 0 ,0]]), out2, "OK" );

    assert.deepEqual( lossL1([.9, 0.2, 0.1, .4, .9], [1, 0, 0, 1, 1]), 1.1, "OK" );

    assert.deepEqual( lossL2([.9, 0.2, 0.1, .4, .9], [1, 0, 0, 1, 1]), 0.43, "OK" );
    
})


